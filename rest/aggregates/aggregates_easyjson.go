// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package aggregates

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson2eca82f0DecodeGithubComPolygonIoClientGolangRestAggregates(in *jlexer.Lexer, out *GetResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ticker":
			out.Ticker = string(in.String())
		case "queryCount":
			out.QueryCount = int(in.Int())
		case "resultsCount":
			out.ResultsCount = int(in.Int())
		case "adjusted":
			out.Adjusted = bool(in.Bool())
		case "results":
			if in.IsNull() {
				in.Skip()
				out.Aggs = nil
			} else {
				in.Delim('[')
				if out.Aggs == nil {
					if !in.IsDelim(']') {
						out.Aggs = make([]Aggregate, 0, 0)
					} else {
						out.Aggs = []Aggregate{}
					}
				} else {
					out.Aggs = (out.Aggs)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Aggregate
					(v1).UnmarshalEasyJSON(in)
					out.Aggs = append(out.Aggs, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "status":
			out.Status = string(in.String())
		case "request_id":
			out.RequestID = string(in.String())
		case "count":
			out.Count = int(in.Int())
		case "error":
			out.Error = string(in.String())
		case "message":
			out.Message = string(in.String())
		case "next_url":
			out.NextURL = string(in.String())
		case "previous_url":
			out.PreviousURL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2eca82f0EncodeGithubComPolygonIoClientGolangRestAggregates(out *jwriter.Writer, in GetResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ticker != "" {
		const prefix string = ",\"ticker\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Ticker))
	}
	{
		const prefix string = ",\"queryCount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.QueryCount))
	}
	{
		const prefix string = ",\"resultsCount\":"
		out.RawString(prefix)
		out.Int(int(in.ResultsCount))
	}
	{
		const prefix string = ",\"adjusted\":"
		out.RawString(prefix)
		out.Bool(bool(in.Adjusted))
	}
	if len(in.Aggs) != 0 {
		const prefix string = ",\"results\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v2, v3 := range in.Aggs {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"request_id\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	if in.Count != 0 {
		const prefix string = ",\"count\":"
		out.RawString(prefix)
		out.Int(int(in.Count))
	}
	if in.Error != "" {
		const prefix string = ",\"error\":"
		out.RawString(prefix)
		out.String(string(in.Error))
	}
	if in.Message != "" {
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	if in.NextURL != "" {
		const prefix string = ",\"next_url\":"
		out.RawString(prefix)
		out.String(string(in.NextURL))
	}
	if in.PreviousURL != "" {
		const prefix string = ",\"previous_url\":"
		out.RawString(prefix)
		out.String(string(in.PreviousURL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2eca82f0EncodeGithubComPolygonIoClientGolangRestAggregates(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2eca82f0EncodeGithubComPolygonIoClientGolangRestAggregates(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2eca82f0DecodeGithubComPolygonIoClientGolangRestAggregates(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2eca82f0DecodeGithubComPolygonIoClientGolangRestAggregates(l, v)
}
func easyjson2eca82f0DecodeGithubComPolygonIoClientGolangRestAggregates1(in *jlexer.Lexer, out *Aggregate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "T":
			out.Ticker = string(in.String())
		case "v":
			out.Volume = float64(in.Float64())
		case "vw":
			out.VWAP = float64(in.Float64())
		case "a":
			out.AggregateVWAP = float64(in.Float64())
		case "o":
			out.Open = float64(in.Float64())
		case "c":
			out.Close = float64(in.Float64())
		case "h":
			out.High = float64(in.Float64())
		case "l":
			out.Low = float64(in.Float64())
		case "t":
			out.Timestamp = int64(in.Int64())
		case "n":
			out.Transactions = int64(in.Int64())
		case "m":
			out.Market = string(in.String())
		case "x":
			out.Exchange = int32(in.Int32())
		case "g":
			out.Locale = string(in.String())
		case "op":
			out.OfficialOpenPrice = float64(in.Float64())
		case "z":
			out.AverageSize = float64(in.Float64())
		case "av":
			out.AccumulatedVolume = float64(in.Float64())
		case "s":
			out.StartTimestamp = int64(in.Int64())
		case "e":
			out.EndTimestamp = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2eca82f0EncodeGithubComPolygonIoClientGolangRestAggregates1(out *jwriter.Writer, in Aggregate) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Ticker != "" {
		const prefix string = ",\"T\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Ticker))
	}
	{
		const prefix string = ",\"v\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Volume))
	}
	if in.VWAP != 0 {
		const prefix string = ",\"vw\":"
		out.RawString(prefix)
		out.Float64(float64(in.VWAP))
	}
	if in.AggregateVWAP != 0 {
		const prefix string = ",\"a\":"
		out.RawString(prefix)
		out.Float64(float64(in.AggregateVWAP))
	}
	{
		const prefix string = ",\"o\":"
		out.RawString(prefix)
		out.Float64(float64(in.Open))
	}
	{
		const prefix string = ",\"c\":"
		out.RawString(prefix)
		out.Float64(float64(in.Close))
	}
	{
		const prefix string = ",\"h\":"
		out.RawString(prefix)
		out.Float64(float64(in.High))
	}
	{
		const prefix string = ",\"l\":"
		out.RawString(prefix)
		out.Float64(float64(in.Low))
	}
	{
		const prefix string = ",\"t\":"
		out.RawString(prefix)
		out.Int64(int64(in.Timestamp))
	}
	if in.Transactions != 0 {
		const prefix string = ",\"n\":"
		out.RawString(prefix)
		out.Int64(int64(in.Transactions))
	}
	if in.Market != "" {
		const prefix string = ",\"m\":"
		out.RawString(prefix)
		out.String(string(in.Market))
	}
	if in.Exchange != 0 {
		const prefix string = ",\"x\":"
		out.RawString(prefix)
		out.Int32(int32(in.Exchange))
	}
	if in.Locale != "" {
		const prefix string = ",\"g\":"
		out.RawString(prefix)
		out.String(string(in.Locale))
	}
	if in.OfficialOpenPrice != 0 {
		const prefix string = ",\"op\":"
		out.RawString(prefix)
		out.Float64(float64(in.OfficialOpenPrice))
	}
	if in.AverageSize != 0 {
		const prefix string = ",\"z\":"
		out.RawString(prefix)
		out.Float64(float64(in.AverageSize))
	}
	if in.AccumulatedVolume != 0 {
		const prefix string = ",\"av\":"
		out.RawString(prefix)
		out.Float64(float64(in.AccumulatedVolume))
	}
	if in.StartTimestamp != 0 {
		const prefix string = ",\"s\":"
		out.RawString(prefix)
		out.Int64(int64(in.StartTimestamp))
	}
	if in.EndTimestamp != 0 {
		const prefix string = ",\"e\":"
		out.RawString(prefix)
		out.Int64(int64(in.EndTimestamp))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Aggregate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2eca82f0EncodeGithubComPolygonIoClientGolangRestAggregates1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Aggregate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2eca82f0EncodeGithubComPolygonIoClientGolangRestAggregates1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Aggregate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2eca82f0DecodeGithubComPolygonIoClientGolangRestAggregates1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Aggregate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2eca82f0DecodeGithubComPolygonIoClientGolangRestAggregates1(l, v)
}
